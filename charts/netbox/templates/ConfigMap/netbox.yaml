apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "netbox.configmapName" . }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
  labels: {{- include "common.labels.standard" (dict "customLabels" .Values.commonLabels "context" $) | nindent 4 }}
data:
  configuration.py: |-
    {{- if .Values.allowedHostsIncludesPodIp }}
    import os
    {{- end }}
    import re
    from pathlib import Path

    import yaml


    def _deep_merge(source, destination):
        """Inspired by https://stackoverflow.com/a/20666342"""
        for key, value in source.items():
            dst_value = destination.get(key)

            if isinstance(value, dict) and isinstance(dst_value, dict):
                _deep_merge(value, dst_value)
            else:
                destination[key] = value

        return destination


    def _load_yaml():
        extraConfigBase = Path("/run/config/extra")
        configFiles = [Path("/run/config/netbox/netbox.yaml")]

        configFiles.extend(sorted(extraConfigBase.glob("*/*.yaml")))

        for configFile in configFiles:
            with open(configFile, "r") as f:
                config = yaml.safe_load(f)

            _deep_merge(config, globals())


    def _load_secret(name, key):
        path = "/run/secrets/{name}/{key}".format(name=name, key=key)
        with open(path, "r") as f:
            return f.read()


    CORS_ORIGIN_REGEX_WHITELIST = list()
    DATABASE = dict()
    EMAIL = dict()
    REDIS = dict()

    _load_yaml()

    DATABASE["PASSWORD"] = _load_secret("netbox", "db_password")
    EMAIL["PASSWORD"] = _load_secret("netbox", "email_password")
    REDIS["tasks"]["PASSWORD"] = _load_secret("netbox", "redis_tasks_password")
    REDIS["caching"]["PASSWORD"] = _load_secret("netbox", "redis_cache_password")
    SECRET_KEY = _load_secret("netbox", "secret_key")

    # Post-process certain values
    CORS_ORIGIN_REGEX_WHITELIST = [re.compile(r) for r in CORS_ORIGIN_REGEX_WHITELIST]
    {{- if and (not .Values.redis.enabled) .Values.tasksRedis.sentinels }}
    REDIS['tasks']['SENTINELS'] = [tuple(x.split(r":")) for x in REDIS['tasks']['SENTINELS']]
    {{- end }}
    {{- if and (not .Values.redis.enabled) .Values.cachingRedis.sentinels }}
    REDIS['caching']['SENTINELS'] = [tuple(x.split(r":")) for x in REDIS['caching']['SENTINELS']]
    {{- end }}

    {{- if .Values.allowedHostsIncludesPodIp }}
    ALLOWED_HOSTS.append(os.getenv("POD_IP"))
    {{- end }}

  netbox.yaml: |-
    ALLOWED_HOSTS: {{ toJson .Values.allowedHosts }}

    DATABASE:
      HOST: {{ include "netbox.databaseHost" . | quote }}
      USER: {{ include "netbox.databaseUser" . | quote }}
      NAME: {{ include "netbox.databaseName" . | quote }}
      PORT: {{ include "netbox.databasePort" . }}
      OPTIONS:
        sslmode: {{ .Values.externalDatabase.sslMode | quote }}
        target_session_attrs: {{ .Values.externalDatabase.targetSessionAttrs | default "read-write" | quote }}
      CONN_MAX_AGE: {{ .Values.externalDatabase.connMaxAge | int }}
      DISABLE_SERVER_SIDE_CURSORS: {{ toJson .Values.externalDatabase.disableServerSideCursors }}

    ADMINS: {{ toJson .Values.admins }}
    ALLOW_TOKEN_RETRIEVAL: {{ toJson .Values.allowTokenRetrieval }}
    AUTH_PASSWORD_VALIDATORS: {{ toJson .Values.authPasswordValidators }}
    ALLOWED_URL_SCHEMES: {{ toJson .Values.allowedUrlSchemes }}
    BANNER_TOP: {{ .Values.banner.top | quote }}
    BANNER_BOTTOM: {{ .Values.banner.bottom | quote }}
    BANNER_LOGIN: {{ .Values.banner.login | quote }}
    BASE_PATH: {{ .Values.basePath | quote }}
    CENSUS_REPORTING_ENABLED: {{ toJson .Values.censusReporting }}
    CHANGELOG_RETENTION: {{ int .Values.changelogRetention }}
    CUSTOM_VALIDATORS: {{ toJson .Values.customValidators }}
    DEFAULT_USER_PREFERENCES: {{ toJson .Values.defaultUserPreferences }}
    CORS_ORIGIN_ALLOW_ALL: {{ toJson .Values.cors.originAllowAll }}
    CORS_ORIGIN_WHITELIST: {{ toJson .Values.cors.originWhitelist }}
    CORS_ORIGIN_REGEX_WHITELIST: {{ toJson .Values.cors.originRegexWhitelist }}
    CSRF_TRUSTED_ORIGINS: {{ toJson .Values.csrf.trustedOrigins }}
    DEBUG: {{ toJson .Values.debug }}
    DEFAULT_LANGUAGE: {{ .Values.defaultLanguage | quote }}

    EMAIL:
      SERVER: {{ .Values.email.server | quote }}
      PORT: {{ .Values.email.port | int }}
      USERNAME: {{ .Values.email.username | quote }}
      USE_SSL: {{ toJson .Values.email.useSSL }}
      USE_TLS: {{ toJson .Values.email.useTLS }}
      SSL_CERTFILE: {{ .Values.email.sslCertFile | quote }}
      SSL_KEYFILE: {{ .Values.email.sslKeyFile | quote }}
      TIMEOUT: {{ .Values.email.timeout | int }}
      FROM_EMAIL: {{ toJson .Values.email.from }}

    ENFORCE_GLOBAL_UNIQUE: {{ toJson .Values.enforceGlobalUnique }}
    EXEMPT_VIEW_PERMISSIONS: {{ toJson .Values.exemptViewPermissions }}
    FIELD_CHOICES: {{ toJson .Values.fieldChoices }}
    GRAPHQL_ENABLED: {{ toJson .Values.graphQlEnabled }}
    HTTP_PROXIES: {{ toJson .Values.httpProxies }}
    INTERNAL_IPS: {{ toJson .Values.internalIPs }}
    JOB_RETENTION: {{ int .Values.jobRetention }}
    LOGGING: {{ toJson .Values.logging }}
    LOGIN_PERSISTENCE: {{ toJson .Values.loginPersistence }}
    LOGIN_REQUIRED: {{ toJson .Values.loginRequired }}
    LOGIN_TIMEOUT: {{ int .Values.loginTimeout }}
    LOGOUT_REDIRECT_URL: {{ .Values.logoutRedirectUrl | quote }}
    MAINTENANCE_MODE: {{ toJson .Values.maintenanceMode }}
    MAPS_URL: {{ .Values.mapsUrl | quote }}
    MAX_PAGE_SIZE: {{ int .Values.maxPageSize }}
    MEDIA_ROOT: /opt/netbox/netbox/media
    {{- if .Values.storageBackend }}
    STORAGE_BACKEND: {{ .Values.storageBackend | quote }}
    STORAGE_CONFIG:  {{ toJson .Values.storageConfig }}
    {{- end }}
    METRICS_ENABLED: {{ toJson .Values.metrics.enabled }}
    PAGINATE_COUNT: {{ int .Values.paginateCount }}
    PLUGINS: {{ toJson .Values.plugins }}
    PLUGINS_CONFIG: {{ toJson .Values.pluginsConfig }}
    POWERFEED_DEFAULT_AMPERAGE: {{ int .Values.powerFeedDefaultAmperage }}
    POWERFEED_DEFAULT_MAX_UTILIZATION: {{ int .Values.powerFeedMaxUtilisation }}
    POWERFEED_DEFAULT_VOLTAGE: {{ int .Values.powerFeedDefaultVoltage }}
    PREFER_IPV4: {{ toJson .Values.preferIPv4 }}
    RACK_ELEVATION_DEFAULT_UNIT_HEIGHT: {{ int .Values.rackElevationDefaultUnitHeight }}
    RACK_ELEVATION_DEFAULT_UNIT_WIDTH: {{ int .Values.rackElevationDefaultUnitWidth }}
    REMOTE_AUTH_ENABLED: {{ toJson .Values.remoteAuth.enabled }}
    REMOTE_AUTH_BACKEND: {{ toJson .Values.remoteAuth.backends }}
    REMOTE_AUTH_HEADER: {{ .Values.remoteAuth.header | quote }}
    REMOTE_AUTH_USER_FIRST_NAME: {{ .Values.remoteAuth.userFirstName | quote }}
    REMOTE_AUTH_USER_LAST_NAME: {{ .Values.remoteAuth.userLastName | quote }}
    REMOTE_AUTH_USER_EMAIL: {{ .Values.remoteAuth.userEmail | quote }}
    REMOTE_AUTH_AUTO_CREATE_USER: {{ toJson .Values.remoteAuth.autoCreateUser }}
    REMOTE_AUTH_AUTO_CREATE_GROUPS: {{ toJson .Values.remoteAuth.autoCreateGroups }}
    REMOTE_AUTH_DEFAULT_GROUPS: {{ toJson .Values.remoteAuth.defaultGroups }}
    REMOTE_AUTH_DEFAULT_PERMISSIONS: {{ toJson .Values.remoteAuth.defaultPermissions }}
    REMOTE_AUTH_GROUP_SYNC_ENABLED: {{ toJson .Values.remoteAuth.groupSyncEnabled }}
    REMOTE_AUTH_GROUP_HEADER: {{ .Values.remoteAuth.groupHeader | quote }}
    REMOTE_AUTH_SUPERUSER_GROUPS: {{ toJson .Values.remoteAuth.superuserGroups }}
    REMOTE_AUTH_SUPERUSERS: {{ toJson .Values.remoteAuth.superusers }}
    REMOTE_AUTH_STAFF_GROUPS: {{ toJson .Values.remoteAuth.staffGroups }}
    REMOTE_AUTH_STAFF_USERS: {{ toJson .Values.remoteAuth.staffUsers }}
    REMOTE_AUTH_GROUP_SEPARATOR: {{ .Values.remoteAuth.groupSeparator | quote }}
    RELEASE_CHECK_URL: {{ toJson .Values.releaseCheck.url }}

    REDIS:
      tasks:
        {{- if .Values.tasksRedis.sentinels }}
        SENTINELS: {{ toJson .Values.tasksRedis.sentinels }}
        SENTINEL_SERVICE: {{ .Values.tasksRedis.sentinelService | quote }}
        SENTINEL_TIMEOUT: {{ .Values.tasksRedis.sentinelTimeout | int }}
        {{- else }}
        HOST: {{ include "netbox.tasksRedis.host" . | quote }}
        PORT: {{ include "netbox.tasksRedis.port" . | int }}
        {{- end }}
        USERNAME: {{ .Values.tasksRedis.username | quote }}
        DATABASE: {{ int .Values.tasksRedis.database }}
        SSL: {{ toJson .Values.tasksRedis.ssl }}
        INSECURE_SKIP_TLS_VERIFY: {{ toJson .Values.tasksRedis.insecureSkipTlsVerify }}
        CA_CERT_PATH: {{ .Values.tasksRedis.caCertPath | quote }}
      caching:
        {{- if .Values.cachingRedis.sentinels }}
        SENTINELS: {{ toJson .Values.cachingRedis.sentinels }}
        SENTINEL_SERVICE: {{ .Values.cachingRedis.sentinelService | quote }}
        SENTINEL_TIMEOUT: {{ .Values.cachingRedis.sentinelTimeout | int }}
        {{- else }}
        HOST: {{ include "netbox.cachingRedis.host" . | quote }}
        PORT: {{ include "netbox.cachingRedis.port" . | int }}
        {{- end }}
        USERNAME: {{ .Values.cachingRedis.username | quote }}
        DATABASE: {{ int .Values.cachingRedis.database }}
        SSL: {{ toJson .Values.cachingRedis.ssl }}
        INSECURE_SKIP_TLS_VERIFY: {{ toJson .Values.cachingRedis.insecureSkipTlsVerify }}
        CA_CERT_PATH: {{ .Values.cachingRedis.caCertPath | quote }}

    REPORTS_ROOT: {{ .Values.reportsPersistence.path  }}
    RQ_DEFAULT_TIMEOUT: {{ .Values.rqDefaultTimeout | int }}
    SCRIPTS_ROOT: {{ .Values.scriptsPersistence.path }}
    CSRF_COOKIE_NAME: {{ .Values.csrf.cookieName | quote }}
    SESSION_COOKIE_NAME: {{ .Values.sessionCookieName }}
    ENABLE_LOCALIZATION: {{ toJson .Values.enableLocalization }}
    TIME_ZONE: {{ .Values.timeZone | quote }}
    DATE_FORMAT: {{ .Values.dateFormat | quote }}
    TIME_FORMAT: {{ .Values.timeFormat | quote }}
    DATETIME_FORMAT: {{ .Values.dateTimeFormat | quote }}
    SHORT_DATE_FORMAT: {{ .Values.shortDateFormat | quote }}
    SHORT_TIME_FORMAT: {{ .Values.shortTimeFormat | quote }}
    SHORT_DATETIME_FORMAT: {{ .Values.shortDateTimeFormat | quote }}
    SKIP_SUPERUSER: {{ ternary false true .Values.superuser.create | toJson }}

  {{- if and (has "netbox.authentication.LDAPBackend" .Values.remoteAuth.backends) .Values.remoteAuth.ldap.enabled }}
  ldap_config.py: |-
    from importlib import import_module

    from django_auth_ldap.config import LDAPSearch

    import ldap

    import yaml


    def _load_yaml():
        with open("/run/config/netbox/ldap.yaml", "r") as f:
            config = yaml.safe_load(f)
        globals().update(config)


    def _load_secret(name, key):
        path = "/run/secrets/{name}/{key}".format(name=name, key=key)
        with open(path, "r") as f:
            return f.read()


    # Import and return the group type based on string name
    def _import_group_type(group_type_name):
        mod = import_module("django_auth_ldap.config")
        try:
            return getattr(mod, group_type_name)()
        except AttributeError:
            return None


    _load_yaml()

    AUTH_LDAP_BIND_PASSWORD = _load_secret("netbox", "ldap_bind_password")
    # The following may be needed if you are binding to Active Directory.
    AUTH_LDAP_CONNECTION_OPTIONS = {ldap.OPT_REFERRALS: 0}
    AUTH_LDAP_USER_SEARCH = LDAPSearch(
        AUTH_LDAP_USER_SEARCH_BASEDN,
        ldap.SCOPE_SUBTREE,
        "(" + AUTH_LDAP_USER_SEARCH_ATTR + "=%(user)s)",
    )
    AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
        AUTH_LDAP_GROUP_SEARCH_BASEDN,
        ldap.SCOPE_SUBTREE,
        "(objectClass=" + AUTH_LDAP_GROUP_SEARCH_CLASS + ")",
    )
    AUTH_LDAP_GROUP_TYPE = _import_group_type(AUTH_LDAP_GROUP_TYPE)
    # Define special user types using groups. Exercise great caution when assigning superuser status.
    AUTH_LDAP_USER_FLAGS_BY_GROUP = {
        "is_active": AUTH_LDAP_REQUIRE_GROUP,
        "is_staff": {{ .Values.remoteAuth.ldap.isAdminDn | quote }},
        "is_superuser": {{ .Values.remoteAuth.ldap.isSuperUserDn | quote }},
    }
    # Populate the Django user from the LDAP directory.
    AUTH_LDAP_USER_ATTR_MAP = {
        "first_name": {{ .Values.remoteAuth.ldap.attrFirstName | quote }},
        "last_name": {{ .Values.remoteAuth.ldap.attrLastName | quote }},
        "email": {{ .Values.remoteAuth.ldap.attrMail | quote }},
    }

  ldap.yaml: |-
    AUTH_LDAP_SERVER_URI: {{ .Values.remoteAuth.ldap.serverUri | quote }}
    AUTH_LDAP_BIND_DN: {{ .Values.remoteAuth.ldap.bindDn | quote }}
    AUTH_LDAP_START_TLS: {{ toJson .Values.remoteAuth.ldap.startTls }}
    LDAP_IGNORE_CERT_ERRORS: {{ toJson .Values.remoteAuth.ldap.ignoreCertErrors }}
    AUTH_LDAP_USER_DN_TEMPLATE: {{ default nil .Values.remoteAuth.ldap.userDnTemplate }}
    AUTH_LDAP_USER_SEARCH_BASEDN: {{ .Values.remoteAuth.ldap.userSearchBaseDn | quote }}
    AUTH_LDAP_USER_SEARCH_ATTR: {{ .Values.remoteAuth.ldap.userSearchAttr | quote }}
    AUTH_LDAP_GROUP_SEARCH_BASEDN: {{ .Values.remoteAuth.ldap.groupSearchBaseDn | quote }}
    AUTH_LDAP_GROUP_SEARCH_CLASS: {{ .Values.remoteAuth.ldap.groupSearchClass | quote }}
    AUTH_LDAP_GROUP_TYPE: {{ .Values.remoteAuth.ldap.groupType | quote }}
    AUTH_LDAP_REQUIRE_GROUP: {{ .Values.remoteAuth.ldap.requireGroupDn | quote }}
    AUTH_LDAP_FIND_GROUP_PERMS: {{ toJson .Values.remoteAuth.ldap.findGroupPerms }}
    AUTH_LDAP_MIRROR_GROUPS: {{ toJson .Values.remoteAuth.ldap.mirrorGroups }}
    AUTH_LDAP_MIRROR_GROUPS_EXCEPT: {{ toJson .Values.remoteAuth.ldap.mirrorGroupsExcept }}
    AUTH_LDAP_CACHE_TIMEOUT: {{ int .Values.remoteAuth.ldap.cacheTimeout }}
  {{- end }}

  {{- if .Values.overrideUnitConfig -}}
  nginx-unit.json: |-
    {{- toPrettyJson .Values.overrideUnitConfig | nindent 4 }}
  {{- end -}}

  {{- range $index, $config := .Values.extraConfig -}}
  {{- if $config.values }}

  extra-{{ $index }}.yaml: |-
    {{- toYaml $config.values | nindent 4 }}
  {{- end }}
  {{- end -}}