apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "netbox.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  {{- $versionLabel := dict "app.kubernetes.io/version" ( include "netbox.images.version" (dict "imageRoot" .Values.image "global" .Values.global "chart" .Chart) ) }}  
  {{- $labels := include "common.tplvalues.merge" ( dict "values" (list .Values.commonLabels $versionLabel) "context" . ) }}
  labels: {{- include "common.labels.standard" (dict "customLabels" $labels "context" $) | nindent 4 }}
    app.kubernetes.io/component: server
    app.kubernetes.io/part-of: netbox
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ default 1 .Values.replicaCount }}
  {{- end }}
  {{- $podLabels := include "common.tplvalues.merge" (dict "values" ( list .Values.podLabels .Values.commonLabels $versionLabel) "context" . ) }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" (dict "customLabels" $podLabels "context" $) | nindent 6 }}
      app.kubernetes.io/component: server
      app.kubernetes.io/part-of: netbox
  {{ if .Values.updateStrategy -}}
  strategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{ end -}}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/ConfigMap/netbox.yaml") . | sha256sum }}
        {{- if (not .Values.existingSecretName) }}
        checksum/secret: {{ include (print $.Template.BasePath "/Secret/netbox.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.podAnnotations }}
          {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
        {{- if and .Values.metrics.enabled .Values.metrics.podAnnotations }}
          {{- include "common.tplvalues.render" (dict "value" .Values.metrics.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
      labels: {{- include "common.labels.standard" (dict "customLabels" $podLabels "context" $) | nindent 8 }}
        app.kubernetes.io/component: server
        app.kubernetes.io/part-of: netbox
        {{- if and .Values.metrics.enabled .Values.metrics.podLabels }}
          {{- include "common.tplvalues.render" (dict "value" .Values.metrics.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "customLabels" $podLabels "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "customLabels" $podLabels "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      automountServiceAccountToken: {{ .Values.automountServiceAccountToken }}
      {{- if .Values.dnsConfig }}
      dnsConfig: {{- include "common.tplvalues.render" (dict "value" .Values.dnsConfig "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.dnsPolicy }}
      dnsPolicy: {{ .Values.dnsPolicy }}
      {{- end }}
      {{- if semverCompare ">= 1.13" (include "common.capabilities.kubeVersion" .) }}
      enableServiceLinks: {{ .Values.enableServiceLinks }}
      {{- end }}
      {{- include "netbox.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "netbox.serviceAccountName" . }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      containers:
        - name: netbox
          image: {{ template "netbox.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: SUPERUSER_NAME
              value: {{ .Values.superuser.name | quote }}
            - name: SUPERUSER_EMAIL
              value: {{ .Values.superuser.email | quote }}
            - name: SKIP_STARTUP_SCRIPTS
              value: {{ .Values.skipStartupScripts | quote }}
            {{- if .Values.dbWaitDebug }}
            - name: DB_WAIT_DEBUG
              value: "1"
            {{- end }}
            {{- if .Values.overrideUnitConfig }}
            - name: UNIT_CONFIG
              value: /run/config/netbox/nginx-unit.json
            {{- end }}
            {{- if .Values.allowedHostsIncludesPodIp }}
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            {{- end }}
            {{- if .Values.metrics.enabled }}
            - name: prometheus_multiproc_dir
              value: /tmp/metrics
            {{- end }}
            {{- if .Values.extraEnvVars }}
              {{- include "common.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          {{- if or .Values.extraEnvVarsCM .Values.extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.extraEnvVarsCMs }}
            {{- range .Values.extraEnvVarsCMs }}
            - configMapRef:
                name: {{ . }}
            {{- end }}
            {{- end }}
            {{- if .Values.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsSecret "context" $) }}
            {{- end }}
            {{- if .Values.extraEnvVarsSecrets }}
            {{- range .Values.extraEnvVarsSecrets }}
            - secretRef:
                name: {{ . }}
            {{- end }}
            {{- end }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.containerPorts.http }}
              protocol: TCP
            {{- if .Values.extraPorts }}
              {{- include "common.tplvalues.render" (dict "value" .Values.extraPorts "context" $) | nindent 12 }}
            {{- end }}
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /{{ .Values.basePath }}login/
              port: {{ .Values.containerPorts.http }}
              {{- if (not (eq (index .Values.allowedHosts 0) "*")) }}
              httpHeaders:
                - name: Host
                  value: {{ (index .Values.allowedHosts 0) | quote }}
              {{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          {{- end }}
          volumeMounts:
            - name: config
              mountPath: /etc/netbox/config/configuration.py
              subPath: configuration.py
              readOnly: true
            {{- if .Values.remoteAuth.ldap.enabled }}
            - name: config
              mountPath: /etc/netbox/config/ldap/ldap_config.py
              subPath: ldap_config.py
              readOnly: true
            {{- end }}
            - name: config
              mountPath: /run/config/netbox
              readOnly: true
            - name: secrets
              mountPath: /run/secrets/netbox
              readOnly: true
            - name: netbox-tmp
              mountPath: /tmp
            - name: media
              mountPath: {{ .Values.persistence.path | quote }}
              {{- if .Values.persistence.subPath }}
              subPath: {{ .Values.persistence.subPath | quote }}
              {{- end }}
            - name: reports
              mountPath: {{ .Values.reportsPersistence.path  }}
              {{- if .Values.reportsPersistence.subPath }}
              subPath: {{ .Values.reportsPersistence.subPath | quote }}
              {{- end }}
            - name: scripts
              mountPath: {{ .Values.scriptsPersistence.path  }}
              {{- if .Values.scriptsPersistence.subPath }}
              subPath: {{ .Values.scriptsPersistence.subPath | quote }}
              {{- end }}
            {{- if .Files.Glob "files/reports/*.py" }}
            - name: local-reports-files
              mountPath: {{ printf "%s/%s" .Values.reportsPersistence.path "local" }}
            {{- end }}
            {{- if .Files.Glob "files/scripts/*.py" }}
            - name: local-scripts-files
              mountPath: {{ printf "%s/%s" .Values.scriptsPersistence.path "local" }}
            {{- end }}
            - name: optunit
              mountPath: /opt/unit
            - name: secrets
              mountPath: /run/secrets/superuser_password
              subPath: superuser_password
              readOnly: true
            - name: secrets
              mountPath: /run/secrets/superuser_api_token
              subPath: superuser_api_token
              readOnly: true
            {{- if or .Values.initdbScriptsConfigMap .Values.initdbScripts }}
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d
            {{- end }}
            {{- include "netbox.extraConfig.volumeMounts" . | nindent 12 }}
            {{- if and .Values.metrics.enabled .Values.metrics.extraVolumeMounts }}
              {{- include "common.tplvalues.render" (dict "value" .Values.metrics.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
            {{- if .Values.extraVolumeMounts }}
              {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
        {{- if .Values.sidecars }}
          {{- include "common.tplvalues.render" ( dict "value" .Values.sidecars "context" $) | nindent 8 }}
        {{- end }}
      {{- $needsVolumePermissions := and .Values.volumePermissions.enabled .Values.persistence.enabled .Values.podSecurityContext.enabled .Values.containerSecurityContext.enabled }}
      initContainers:
        - name: init-dirs
          image: {{ template "netbox.init-dirs.image" . }}
          imagePullPolicy: {{ .Values.initDirs.image.pullPolicy }}
          command:
            - /bin/sh
            - '-c'
            - mkdir -p /opt/unit/state /opt/unit/tmp
          {{- if .Values.initDirs.resources }}
          resources: {{- toYaml .Values.initDirs.resources | nindent 10 }}
          {{- end }}
          securityContext: {{- omit .Values.initDirs.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          volumeMounts:
            - name: optunit
              mountPath: /opt/unit
        {{- include "netbox.redisWait.container" (dict "securityContext" .Values.redisWait.containerSecurityContext "context" $) | trim | nindent 8 }}
        {{- if or .Values.initContainers $needsVolumePermissions }}
        {{- if .Values.initContainers }}
          {{- include "common.tplvalues.render" (dict "value" .Values.initContainers "context" $) | nindent 10 }}
        {{- end }}
        {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "netbox.configmapName" . }}
        - name: secrets
          projected:
            sources:
            - secret:
                name: {{ include "netbox.secretName" . | quote }}
                items:
                  - key: {{ include "netbox.email.secretPasswordKey" . }}
                    path: email_password
                  - key: {{ include "netbox.secretSecretKeyKey" . }}
                    path: secret_key
            {{- if and .Values.remoteAuth.enabled (has "netbox.authentication.LDAPBackend" .Values.remoteAuth.backends) .Values.remoteAuth.ldap.enabled }}
            - secret:
                name: {{ include "netbox.remoteAuth.secretName" . | quote }}
                items:
                  {{- if and (has "netbox.authentication.LDAPBackend" .Values.remoteAuth.backends) .Values.remoteAuth.ldap.enabled }}
                  - key: {{ include "netbox.remoteAuth.ldap.secretBindPasswordKey" . | quote }}
                    path: ldap_bind_password
                  {{- end }}
            {{- end }}
            - secret:
                name: {{ include "netbox.superuser.secretName" . | quote }}
                items:
                  # Used by netbox-docker entry scripts
                  - key: {{ include "netbox.superuser.secretPasswordKey" . | quote }}
                    path: superuser_password
                  - key: {{ include "netbox.superuser.secretApiTokenKey" . | quote }}
                    path: superuser_api_token
            - secret:
                name: {{ include "netbox.databaseSecretName" . | quote }}
                items:
                  - key: {{ include "netbox.databaseSecretPasswordKey" . | quote }}
                    path: db_password
            - secret:
                name: {{ include "netbox.redis.secretName" . | quote }}
                items:
                  - key: {{ include "netbox.cachingRedis.secretPasswordKey" . | quote }}
                    path: redis_cache_password
                  - key: {{ include "netbox.tasksRedis.secretPasswordKey" . | quote }}
                    path: redis_tasks_password
        - name: netbox-tmp
          emptyDir:
            medium: Memory
        - name: optunit
          emptyDir:
            medium: Memory
        {{- include "netbox.media.volumes" . | trim | nindent 8 }}
        {{- include "netbox.reports.volumes" . | trim | nindent 8 }}
        {{- include "netbox.scripts.volumes" . | trim | nindent 8 }}
        {{- if or .Values.initdbScriptsConfigMap .Values.initdbScripts }}
        - name: custom-init-scripts
          configMap:
            name: {{ include "netbox.initdbScriptsCM" . }}
        {{- end }}
        {{- include "netbox.extraConfig.volumes" . | nindent 8 }}
        {{- if and .Values.metrics.enabled .Values.metrics.extraVolumes }}
          {{- include "common.tplvalues.render" (dict "value" .Values.metrics.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
        {{- if .Values.extraVolumes }}
          {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
        {{- end }}