{{- if and .Values.worker.enabled (eq .Values.worker.kind "Job") }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "netbox.worker.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  {{- $versionLabel := dict "app.kubernetes.io/version" ( include "common.images.version" ( dict "imageRoot" .Values.worker.image "chart" .Chart ) ) }}  
  {{- $labels := include "common.tplvalues.merge" ( dict "values" ( list .Values.commonLabels $versionLabel ) "context" . ) }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" $labels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: worker
    app.kubernetes.io/part-of: netbox
  {{- if or .Values.worker.annotations .Values.commonAnnotations }}
  {{- $annotations := include "common.tplvalues.merge" ( dict "values" ( list .Values.worker.annotations .Values.commonAnnotations ) "context" . ) }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $annotations "context" $) | nindent 4 }}
  {{- end }}
spec:
  parallelism: 1
  template:
    metadata:
      {{- $podLabels := include "common.tplvalues.merge" ( dict "values" ( list .Values.worker.podLabels .Values.commonLabels ) "context" . ) }}
      labels: {{- include "common.labels.standard" ( dict "customLabels" $podLabels "context" $ ) | nindent 8 }}
        app.kubernetes.io/component: worker
      {{- if .Values.worker.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.worker.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      {{- include "netbox.imagePullSecrets" . | nindent 6 }}
      restartPolicy: OnFailure
      {{- if .Values.worker.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.worker.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      automountServiceAccountToken: {{ .Values.worker.automountServiceAccountToken }}
      {{- if .Values.worker.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.worker.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      containers:
        - name: worker
          image: {{ template "netbox.worker.image" . }}
          imagePullPolicy: {{ .Values.worker.image.pullPolicy }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.worker.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.worker.command "context" $) | nindent 12 }}
          {{- else }}
          command:
            - /opt/netbox/venv/bin/python
            - /opt/netbox/netbox/manage.py
            - rqworker
            - --max-jobs
            - "1"
          {{- end }}
          {{- if .Values.worker.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.worker.args "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.worker.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.worker.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          env:
            {{- if .Values.dbWaitDebug }}
            - name: DB_WAIT_DEBUG
              value: "1"
            {{- end }}
            {{- if .Values.worker.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.worker.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          {{- if or .Values.worker.extraEnvVarsCM .Values.worker.extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.worker.extraEnvVarsCM }}
            - configMapRef:
                name: {{ .Values.worker.extraEnvVarsCM }}
            {{- end }}
            {{- if .Values.worker.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.worker.extraEnvVarsSecret }}
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: config
              mountPath: /etc/netbox/config/configuration.py
              subPath: configuration.py
              readOnly: true
            {{- if .Values.remoteAuth.ldap.enabled }}
            - name: config
              mountPath: /etc/netbox/config/ldap/ldap_config.py
              subPath: ldap_config.py
              readOnly: true
            {{- end }}
            - name: config
              mountPath: /run/config/netbox
              readOnly: true
            - name: secrets
              mountPath: /run/secrets/netbox
              readOnly: true
            {{- include "netbox.extraConfig.volumeMounts" . | nindent 12 -}}
            - name: netbox-tmp
              mountPath: /tmp
            - name: media
              mountPath: {{ .Values.persistence.path | quote }}
              {{- if .Values.persistence.subPath }}
              subPath: {{ .Values.persistence.subPath | quote }}
              {{- end }}
            - name: reports
              mountPath: {{ .Values.reportsPersistence.path  }}
              {{- if .Values.reportsPersistence.subPath }}
              subPath: {{ .Values.reportsPersistence.subPath | quote }}
              {{- end }}
            - name: scripts
              mountPath: {{ .Values.scriptsPersistence.path  }}
              {{- if .Values.scriptsPersistence.subPath }}
              subPath: {{ .Values.scriptsPersistence.subPath | quote }}
              {{- end }}
          {{- if .Values.worker.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.worker.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.worker.resources }}
          resources: {{- toYaml .Values.worker.resources | nindent 12 }}
          {{- end }}
        {{- if .Values.worker.sidecars }}
          {{- include "common.tplvalues.render" (dict "value" .Values.worker.sidecars "context" $) | nindent 8 }}
        {{- end }}
      {{- $needsVolumePermissions := and .Values.volumePermissions.enabled .Values.persistence.enabled .Values.worker.podSecurityContext.enabled .Values.worker.containerSecurityContext.enabled }}
      initContainers:
        {{- if .Values.redisWait.enabled }}
        {{- include "netbox.redisWait.container" (dict "securityContext" .Values.redisWait.containerSecurityContext "context" $) | trim | nindent 8 }}
        {{- end }}
        {{- if or .Values.worker.initContainers $needsVolumePermissions }}
        {{- if .Values.worker.initContainers }}
          {{- include "common.tplvalues.render" (dict "value" .Values.worker.initContainers "context" $) | nindent 8 }}
        {{- end }}
        {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "netbox.configmapName" . }}
        - name: secrets
          projected:
            sources:
              - secret:
                  name: {{ include "netbox.secretName" . | quote }}
                  items:
                    # Used by our configuration
                    - key: {{ include "netbox.email.secretPasswordKey" . | quote }}
                      path: email_password
                    - key: secret_key
                      path: secret_key
              {{- if .Values.remoteAuth.enabled }}
              - secret:
                  name: {{ include "netbox.remoteAuth.secretName" . | quote }}
                  items:
                    {{- if and (has "netbox.authentication.LDAPBackend" .Values.remoteAuth.backends) .Values.remoteAuth.ldap.enabled }}
                    - key: ldap_bind_password
                      path: ldap_bind_password
                    {{- end }}
              {{- end }}
              - secret:
                  name: {{ include "netbox.databaseSecretName" . | quote }}
                  items:
                    - key: {{ include "netbox.databaseSecretPasswordKey" . | quote }}
                      path: db_password
              - secret:
                  name: {{ include "netbox.redis.secretName" . | quote }}
                  items:
                    - key: {{ include "netbox.cachingRedis.secretPasswordKey" . | quote }}
                      path: redis_cache_password
                    - key: {{ include "netbox.tasksRedis.secretPasswordKey" . | quote }}
                      path: redis_tasks_password
        {{- include "netbox.extraConfig.volumes" . | nindent 8 -}}
        - name: netbox-tmp
          emptyDir:
            medium: Memory
        - name: media
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (printf "%s-media" (include "netbox.fullname" .)) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: reports
          {{- if .Values.reportsPersistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.reportsPersistence.existingClaim | default (printf "%s-reports" (include "netbox.fullname" .)) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: scripts
          {{- if .Values.scriptsPersistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.scriptsPersistence.existingClaim | default (printf "%s-scripts" (include "netbox.fullname" .)) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
{{- end }}