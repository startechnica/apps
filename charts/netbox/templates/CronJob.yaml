{{- if .Values.housekeeping.enabled -}}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ template "netbox.housekeeping.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  {{- $versionLabel := dict "app.kubernetes.io/version" ( include "netbox.images.version" (dict "imageRoot" .Values.housekeeping.image "global" .Values.global "chart" .Chart) ) }}  
  {{- $labels := include "common.tplvalues.merge" ( dict "values" ( list .Values.commonLabels $versionLabel ) "context" . ) }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" $labels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: housekeeping
    app.kubernetes.io/part-of: netbox
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  concurrencyPolicy: {{ .Values.housekeeping.concurrencyPolicy }}
  failedJobsHistoryLimit: {{ .Values.housekeeping.failedJobsHistoryLimit }}
  schedule: {{ .Values.housekeeping.schedule | quote }}
  successfulJobsHistoryLimit: {{ .Values.housekeeping.successfulJobsHistoryLimit }}
  suspend: {{ .Values.housekeeping.suspend }}
  {{- if or .Values.timezone .Values.housekeeping.timezone }}
  timeZone: {{ coalesce .Values.timezone .Values.housekeeping.timezone | quote }}
  {{- end }}
  jobTemplate:
    spec:
      {{- if .Values.housekeeping.ttlSecondsAfterFinished }}
      ttlSecondsAfterFinished: {{ .Values.housekeeping.ttlSecondsAfterFinished }}
      {{- end }}
      template:
        metadata:
          {{- if .Values.housekeeping.podAnnotations }}
          annotations: {{- include "common.tplvalues.render" (dict "value" .Values.housekeeping.podAnnotations "context" $) | nindent 12 }}
          {{- end }}
          {{- $podLabels := include "common.tplvalues.merge" ( dict "values" (list .Values.housekeeping.podLabels .Values.commonLabels $versionLabel) "context" . ) }}
          labels: {{- include "common.labels.standard" ( dict "customLabels" $podLabels "context" $ ) | nindent 12 }}
            app.kubernetes.io/component: housekeeping
            app.kubernetes.io/part-of: netbox
        spec:
          automountServiceAccountToken: {{ .Values.housekeeping.automountServiceAccountToken }}
          {{- if .Values.housekeeping.affinity }}
          affinity: {{- include "common.tplvalues.render" (dict "value" .Values.housekeeping.affinity "context" $) | nindent 12 }}
          {{- else }}
          affinity:
            podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.housekeeping.podAffinityPreset "component" "housekeeping" "customLabels" $podLabels "context" $) | nindent 14 }}
            podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.housekeeping.podAntiAffinityPreset "component" "housekeeping" "customLabels" $podLabels "context" $) | nindent 14 }}
            nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.housekeeping.nodeAffinityPreset.type "key" .Values.housekeeping.nodeAffinityPreset.key "values" .Values.housekeeping.nodeAffinityPreset.values) | nindent 14 }}
          {{- end }}
          {{- include "netbox.imagePullSecrets" . | nindent 10 }}
          {{- if .Values.housekeeping.nodeSelector }}
          nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.housekeeping.nodeSelector "context" $) | nindent 12 }}
          {{- end }}
          restartPolicy: {{ .Values.housekeeping.restartPolicy }}
          {{- if .Values.housekeeping.podSecurityContext.enabled }}
          securityContext: {{- omit .Values.housekeeping.podSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          serviceAccountName: {{ include "netbox.serviceAccountName" . }}
          {{- if .Values.housekeeping.tolerations }}
          tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.housekeeping.tolerations "context" .) | nindent 10 }}
          {{- end }}
          {{- if .Values.housekeeping.initContainers }}
          initContainers:
            {{- include "common.tplvalues.render" (dict "value" .Values.housekeeping.initContainers "context" $) | nindent 10 }}
          {{- end }}
          containers:
          - name: housekeeping
            {{- if .Values.containerSecurityContext.enabled }}
            securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 14 }}
            {{- end }}
            image: {{ template "netbox.housekeeping.image" . }}
            {{- if .Values.diagnosticMode.enabled }}
            command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 14 }}
            {{- else if .Values.housekeeping.command }}
            command: {{- include "common.tplvalues.render" (dict "value" .Values.housekeeping.command "context" $) | nindent 14 }}
            {{- else }}
            command:
              - /opt/netbox/venv/bin/python
              - /opt/netbox/netbox/manage.py
              - housekeeping
            {{- end }}
            {{- if .Values.diagnosticMode.enabled }}
            args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 14 }}
            {{- else if .Values.args }}
            args: {{- include "common.tplvalues.render" (dict "value" .Values.housekeeping.args "context" $) | nindent 14 }}
            {{- end }}
            env:
              - name: HOUSEKEEPING_INTERVAL
                value: "20"
            {{- if .Values.housekeeping.extraEnvVars }}
              {{- include "common.tplvalues.render" (dict "value" .Values.housekeeping.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
            {{- if or .Values.extraEnvVarsCM .Values.extraEnvVarsSecret }}
            envFrom:
              {{- if .Values.extraEnvVarsCM }}
              - configMapRef:
                  name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsCM "context" $) }}
              {{- end }}
              {{- if .Values.extraEnvVarsSecret }}
              - secretRef:
                  name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsSecret "context" $) }}
              {{- end }}
            {{- end }}
            {{- if .Values.housekeeping.resources }}
            resources: {{- toYaml .Values.housekeeping.resources | nindent 14 }}
            {{- end }}
            volumeMounts:
            - name: config
              mountPath: /etc/netbox/config/configuration.py
              subPath: configuration.py
              readOnly: true
            - name: config
              mountPath: /run/config/netbox
              readOnly: true
            {{- if and (has "netbox.authentication.LDAPBackend" .Values.remoteAuth.backends) .Values.remoteAuth.ldap.enabled }}
            - name: config
              mountPath: /etc/netbox/config/ldap/ldap_config.py
              subPath: ldap_config.py
              readOnly: true
            {{- end }}
            - name: secrets
              mountPath: /run/secrets/netbox
              readOnly: true
            - name: netbox-tmp
              mountPath: /tmp
            - name: media
              mountPath: {{ .Values.persistence.path | quote }}
              subPath: {{ .Values.persistence.subPath | default "" | quote }}
            {{- if .Values.reportsPersistence.enabled }}
            - name: reports
              mountPath: {{ .Values.reportsPersistence.path  }}
              subPath: {{ .Values.reportsPersistence.subPath | default "" | quote }}
            {{- end }}
            {{- if .Values.scriptsPersistence.enabled }}
            - name: scripts
              mountPath: {{ .Values.scriptsPersistence.path  }}
              subPath: {{ .Values.scriptsPersistence.subPath | default "" | quote }}
            {{- end }}
            {{- include "netbox.extraConfig.volumeMounts" . | nindent 12 }}
            {{- if .Values.housekeeping.extraVolumeMounts }}
              {{- include "common.tplvalues.render" ( dict "value" .Values.housekeeping.extraVolumeMounts "context" $ ) | nindent 12 }}
            {{- end }}
          {{- if .Values.sidecars }}
            {{- include "common.tplvalues.render" ( dict "value" .Values.sidecars "context" $) | nindent 10 }}
          {{- end }}
          volumes:
          - name: config
            configMap:
              name: {{ include "netbox.configmapName" . }}
          - name: secrets
            projected:
              sources:
              - secret:
                  name: {{ include "netbox.secretName" . | quote }}
                  items:
                    # Used by our configuration
                    - key: {{ include "netbox.email.secretPasswordKey" . | quote }}
                      path: email_password
                    - key: {{ include "netbox.secretSecretKeyKey" . }}
                      path: secret_key
              {{- if and .Values.remoteAuth.enabled (has "netbox.authentication.LDAPBackend" .Values.remoteAuth.backends) .Values.remoteAuth.ldap.enabled }}
              - secret:
                  name: {{ include "netbox.remoteAuth.secretName" . | quote }}
                  items:
                    {{- if and (has "netbox.authentication.LDAPBackend" .Values.remoteAuth.backends) .Values.remoteAuth.ldap.enabled }}
                    - key: {{ include "netbox.remoteAuth.ldap.secretBindPasswordKey" . | quote }}
                      path: ldap_bind_password
                    {{- end }}
              {{- end }}
              - secret:
                  name: {{ include "netbox.databaseSecretName" . | quote }}
                  items:
                    - key: {{ include "netbox.databaseSecretPasswordKey" . | quote }}
                      path: db_password
              - secret:
                  name: {{ include "netbox.redis.secretName" . | quote }}
                  items:
                    - key: {{ include "netbox.cachingRedis.secretPasswordKey" . | quote }}
                      path: redis_cache_password
                    - key: {{ include "netbox.tasksRedis.secretPasswordKey" . | quote }}
                      path: redis_tasks_password
          - name: netbox-tmp
            emptyDir:
              medium: Memory
          {{- include "netbox.media.volumes" . | trim | nindent 10 }}
          {{- include "netbox.reports.volumes" . | trim | nindent 10 }}
          {{- include "netbox.scripts.volumes" . | trim | nindent 10 }}
          {{- if .Values.extraVolumes }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 10 }}
          {{- end }}
          {{- include "netbox.extraConfig.volumes" . | nindent 10 -}}
{{- end -}}